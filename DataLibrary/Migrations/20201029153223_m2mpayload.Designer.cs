// <auto-generated />
using System;
using EFCore5.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLibrary.Migrations
{
    [DbContext(typeof(PeopleContext))]
    [Migration("20201029153223_m2mpayload")]
    partial class m2mpayload
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-rtm.20509.3");

            modelBuilder.Entity("EFCore5.Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PostalCode = "11111",
                            Street = "1 Main"
                        },
                        new
                        {
                            Id = 2,
                            PostalCode = "22222",
                            Street = "2 Main"
                        },
                        new
                        {
                            Id = 3,
                            PostalCode = "3333",
                            Street = "3 Main"
                        });
                });

            modelBuilder.Entity("EFCore5.Domain.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Julie",
                            LastName = "Lerman"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Husband of",
                            LastName = "Julie"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Brice",
                            LastName = "Lambson"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Arthur",
                            LastName = "Vickers"
                        });
                });

            modelBuilder.Entity("EFCore5.Domain.Resident", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MovedInDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("AddressId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("AddressPerson");
                });

            modelBuilder.Entity("EFCore5.Domain.WildlifeSighting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("WildlifeSightings");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WildlifeSighting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            DateTime = new DateTime(2020, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bear"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 1,
                            DateTime = new DateTime(2020, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bear Cub #1"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 1,
                            DateTime = new DateTime(2020, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bear Cub #2"
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 1,
                            DateTime = new DateTime(2020, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bear Cub #3"
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 1,
                            DateTime = new DateTime(2020, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Squirrel"
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 1,
                            DateTime = new DateTime(2020, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Garter Snake"
                        });
                });

            modelBuilder.Entity("EFCore5.Domain.ScaryWildlifeSighting", b =>
                {
                    b.HasBaseType("EFCore5.Domain.WildlifeSighting");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ScaryWildlifeSighting");
                });

            modelBuilder.Entity("EFCore5.Domain.Resident", b =>
                {
                    b.HasOne("EFCore5.Domain.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore5.Domain.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore5.Domain.WildlifeSighting", b =>
                {
                    b.HasOne("EFCore5.Domain.Address", null)
                        .WithMany("WildlifeSightings")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore5.Domain.Address", b =>
                {
                    b.Navigation("WildlifeSightings");
                });
#pragma warning restore 612, 618
        }
    }
}
